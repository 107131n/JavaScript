0731


객체지향 프로그래밍이란

추상화
캡슐화
다형성
상속성

추상적인 사물을 코드로 구현할 수 있게 만드는 

추상화

캡슐화
보호해야하지만 활용도 가능해야하는 데이터를 안팎으로 이동할 수 있게 하는 메소드
캡슐이 하나의 클래스
클래스 = 데이터 + 메소드

클래스
사용자 정의 데이터형
데이터와 메소드를 사용자인 내가 새로 정의한 데이터형이기 때문에 클래스를 추상적인 데이터형이라고 함
클래스의 본질은 데이터형이라는 점

클래스의 구성

멤버 변수(데이터, 속성, 상태, 필드, 변수) + 메소드(행위, 행동, 기능, 멤버함수)

사물의 특성을 정리하여 필드와 메소드로 표현하는 과정이 추상화

추상화된 결과를 하나의 클래스에 포함시키고 스스로 보호하는 것을 캡슐화



클래스 선언 형식

class 클래스명{

                 접근 지정자 클래스 이름() (...)

                 접근 지정자 ~클래스 이름() (...)

                 접근 지정자 데이터형 멤버 변수(필드);

                 접근 지정자 데이터형 메소드() (...);

}

모든 데이터는 접근 지정자 private(클래스 내부에서만 접근 가능) 붙여야 하고

모든 메소드는 접근 지정자 public(누구나 접근 가능) 붙여야 함 


시용자 정의 데이터 형으로 선언된 변수를 객체라고 함﻿, 본질은 변수

C++: 클래스 스택 메모리, 힙 메모리 할당
C#, 자바: 모두 힙 메모리 할당
C언어 동적 메모리 할당: malloc(메모리 크기)

new 연산자: 동적 메모리 할당, 포인터 전달



데이터 타입

int a = 0;

Dog a = 0; 



생성자

모든 변수는 선언이 되면 값을 초기화함

객체도 본질적으로 변수라 선언되면 초기화해야 함

객체 생성 시 초기화 전용 메소드를 제공하는데 바로 생성자임

객체 생성 시 자동으로 호출되는 메소드

클래스의 이름과 동일한 이름의 메소드


namespace

시스템 규모가 커지고, 개발 협업 체제가 되면서 변수, 클래스, 메소드 등의 명칭 간 충돌 발생

이름 공간의 영역을 지정하여 명칭 간 충돌 방지

namespace A{

           class A{a, b}

}

namespace B{

           class A{c, d}

}


추상화 - 사물을 대상으로 클래스를 만드는 과정
캡슐화 - 만들어진 클래스의 데이터 보안


객체 생성: 동적 메모리 할당, new 연산자

객체.메소드

Dog a = new Dog();

a.Bark();



생성자: 객체의 초기화

소멸자: 



다형성 ✨

함수의 이름이 같더라도 전달 인자 타입, 개수 등에 따라 구분

객체지향에서는 오버로딩과 오버라이딩 기법이 있음



오버로딩


외관은 똑같지만 내용이 다른 경우

이름이 같은 함수일지라도 전달인자 타입이나 개수가 다른 경우



 오버라이딩

무언가에 올라타서 기존의 것을 덮어씀

상속의 개념이 기반이 되어야 함






상속성

이미 완성된 클래스를 다른 클래스에 상속 가능

부모클래스로부터 상속받을 때 클래스 이름 끝에 콜론(;)을 붙인 후 부모 클래스의 이름을 적음

자식 클래스: 부모 클래스

자식 클래스 extends 부모 클래스

 



