0728

조건문
if~else문

var 
타입이 variable하다는 의미

아이디 선택자와 클래스 선택자
documnet 객체에서 제공해주는 method 중 
document.querySelector(#id) 단일 요소
document.querySelector(.class) 복수 요소


자바스크립트에서 "", ''는 같음

switch~case문


while문

for문
for(초기화;반복 조건;증감문)


var 배열명 = ['요소', '요소2','요소3'];
document.write(배열명[인덱스 번호]+'<br>');

자바스크립트는 배열 수가 넘어도 동적으로 지원해줘서 인덱스 추가 가능

배열의 길이
array.length


태그 선택자
document.querySelectorAll('태그명')

console.log
이미 정의된 모든 종류의 변수를 출력하거나 사용자에게 표시되어야 하는 메시지를 출력하는데 사용되는 javascript 함수 






함수
임의의 입력 x에 대해 그에 따른 출력 y가 존재하는 것
기능 단위의 모듈
코드의 가독성이 좋아짐
코드의 유지 보수 및 확장이 좋아짐

함수의 형태
function 함수이름(전달인자1, 전달인자2){
	함수의 내용
}
타입이 없음


함수 정의 후 호출해야 기능을 함





이벤트와 이벤트 핸들러

이벤트
특정 동작의 발생
버튼 클릭이나 키보드를 누르는 것
click, change, focus, keydown, keyup, load, submit


이벤트 핸들러
사건이 발생하면 그 사건에 대한 처리 과정을 거침
이벤트 발생 시 처리하는 기능
이벤트 발생 시 등록된 함수(콜백 함수)로 호출


이벤트와 이벤트 핸들러 연결 방법
(1)HTML 태그와 속성으로 연결시켜주는 법
<태그 속성 = "속성값" 이벤트 핸들러 = "함수">
이벤트 핸들러는 이름 앞에 on 붙여주면 이벤트 핸들러 이름이 됨


이벤트 핸들러 종류
마우스 이벤트
키보드 이벤트
기타 이벤트


MVC 패턴
분리헤서 역할을 나눔


이벤트와 이벤트 핸들러 연결 방법
(2)자바스크립트 영역에서 연결시켜주는 방법
HTML 안에서 이벤트 연결의 문제점: HTML코드 전체에 섞여 있다는 문제
가장 좋은 모델: HTML은 문서 표시, 자바스크립트는 동작 구현
자바스크립트 내에 이벤트 핸들러 지정하는 형태

 
함수 포인터
element.이벤트 핸들러 = function()
객체 안의 .속성            = 메소드(함수)()


이벤트와 이벤트 핸들러 연결 방법
(3)이벤트 리스너를 사용하여 연결시켜주는 방법
자바스크립트 영역의 이벤트 연결의 문제점: 하나의 이벤트에 여러 이벤트 핸들러 함수를 정의할 수 없다는 것

해결 방법: 이벤트 리스너
element.addEventListener(이벤트, function(){})






자바스크립트 객체

객체의 개념
Date 객체 
String 객체
Array 객체
Function 객체
Number 객체
Math 객체


객체
웹 문서에서 다룰 수 있는 모든 대상들

var arr = (new Array)[1,2,3];
arr[0]     생략 가능


객체의 속성
객체.속성


String 객체의 사용 형태
문자열을 객체화시켜 사용



객체 = 변수

윈도우 객체






C#

변수와 자료형


참조 리턴 ref
메모리를 공유함




객체지향 프로그래밍의 개념

추상화
캡슐화
클래스의 기본
상속성 
다형성



객체 지향
객체: '사물'을 나타내는 추상적인 개념
지향: '지향하는'의 의미


구조적 프로그래밍과 객체 지향 프로그래밍

구조적 프로그래밍
순차적 프로그래밍 방식/ 
하향식 및 폭포수 방식
기능적인 기본 단위는 함수

객체 지향 프로그래밍
기능 단위는 객체
사용자의 요청에 의해 처리되는 구조(이벤트 구조)
예) 모든 윈도우 프로그램; 메모장


추상화
추상: 대상에서 특징만을 뽑아낸 것


캡슐화(데이터 은닉, Encapsulation)
보안, 보호
외부에서 그 내부를 볼 수 없게 한다는 의미
은닉하다, 숨기다
데이터를 외부로부터 숨긴다
마냥 숨기기만 한다면 데이터는 무용지물이고 외부로부터 데이터를 조작할 인터페이스(메소드)가 필요

클래스 = 데이터(변수) + 메소드(함수, 멤버함수)


검색
순차 검색
이분 검색
해시

정렬
버블 정렬
선택 정렬 
삽입 정렬
퀵 정렬

동적 배열

연결 리스트
단순 연결 리스트
이중 연결 리스트

스택과 큐

트리
































































비빔칼국수 마제소바 목살김볶






















































































 






















